#!/usr/bin/env python
# -*- coding: utf-8 -*-



#----------------------------------КОМБИНАТОРНЫЕ ФОРМУЛЫ--------------------------------------------
import Method

def C(m,n):                         #Вычисление СОЧЕТАНИЯ
    if m==n:
        return 1
    else:
        return fact(n)/(fact(m)*fact(n-m))

def P(n):                           #Вычисление ПЕРЕСТАНОВКИ
    return fact(n)                  

def A(m,n):                         #Вычисление РАЗМЕЩЕНЯ
    return fact(n)/fact(n-m)

#print C(1,25)
#---------------------------------------------------------------------------------------------------


#----------------------------------ЧИСЛОВЫЕ ХАРАКТЕРИСТИКИ СЛУЧАЙНЫХ ВЕЛЕЧИН------------------------

def matO(X,P):                     # Вычисление математического ожидания
    m=0
    for i in range(len(X)):
        tmp=X[i]*P[i]
        m=m+tmp
    return m

def matO2(X,P):                     # Вычисление математического ожидания от квадрата Х
    m=0
    for i in range(len(X)):
        tmp=((X[i])**2)*P[i]
        m=m+tmp
    return m

def desp(X,P):                      # Вычисление дисперсии СВ
    return matO2(X,P)-pow(matO(X,P),2)

def sred(X,P):                      # Вычисление среднеквадратичного откланения
    return pow(desp(X,P),0.5)


#-----------------------------------------------------------------------------------------------------


#---------------------------------РАСПРЕДЕЛЕНИЯ СВ-------------------------------------------------

from math import e, pi

def puas(m,l,t):                    #Вероятность по распределению Пуассона
    p=(pow(l*t,m)/fact(m))*pow(e,-(l*t))
    a=l*t
    return p,round(a,1)

def binom(n,p):                     #Биномиальное распеределение для заданного кол-ва N
    q=1-p
    m=n
    for x in range(n+1):
        tmp=C(m,n)*(p**m)*(q**(n-m))
        print 'P',n,'(',m,')= ',tmp
        m=m-1
    return 'OK'


#-----------------------------------------------------------------------------------------------------

def kubik():
    import random
    N = int(raw_input('Enter: '))    #Симуляция бросания кубика и подсчет шестерок.
    M = 0
    for  i  in  xrange(N):
        outcome = int(random.uniform(0,7))
        if outcome == 6:
            M += 1
    print 'Шестерка выпала %d раза из %d' % (M, N)
    
kubik()
#----------------------------------------------------------------------------------------
