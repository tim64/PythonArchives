# -*- coding: utf-8 -*-#-------------------------RSA-------------------------------------import gmpyimport randomimport timeimport matplotlib.pyplot as pltfrom numpy import *import mathdef generator(bits):    from random import getrandbits    key = getrandbits(bits)    return key        #prime = gmpy.is_prime(key)        #if prime == 1:        #    return keyp32=899839571q32=2767096727p64=5624856452458519583q64=16207447686946713037p128=123811871754790132237001048769772504763q128=185334667508126160483658459717434422983p256=103711999751046546065895148540518402499861221659850804394281646774576526748757q256=102001764344113583738236970322265037717800579643871484164511360456041628134473p512=2745156933418793509301450930555254413396209440984273342547606454998725650757157392764768600507242654341105048739420261175375530768645059484691185660926787q512=8134865421663256798587827964670031066432657047829861067941809987424621620214859208642194873306849996673424256732754336098514748096013092727398256631440511p1024=12662337239157261202995926949766238961527435008907322679829974970416262084885126936763238878722430462616924270052861056449173847751342074156217528308017257641430825762845745089999533996190848851719602910400969633870921499251409442250963908511987440707656095224408228285979093661351668618123167716630399861421q1024=80348884317759279075619742047731596281574981461354795972840198609108063864240994321418790701492178952293967297375349025355916592306582174850104553689836064593152449140301525233719481420640700421489294263988794745677293938276725657192548324196962922836903141020072253796713576428471868186270221964686281905151p2048=23351452308756191760262681978135349956704501368550512068160806153980050408130329295170688463334698542455686702443512456381157100746796271435601151399202379543629189238183092957755053465716534893390993649804851936444612610148701107433782502628596359005585295162484777292466392427883166642289780574960024404998300199619489965346231300824606719650327813820970037266389217809230005782223717544878443193618338649832080018953617543808187478381703389405527444950339078434749318263266439105281582964440854072510128516180107658422671012912451644181693767076778414074747038765112069330136195122368764888702174329044143810028519q2048=173749113338222346354881883663816280224747015499757844988217510992252341955142286319199207527835378332944098442769731566092770141506076285163399707575270669131974047309374074122823605005162474679296164332429446982779365098519247869407061200865116546984484338860470778225497714934716412576170461789049483823701936684814485360032188412133180979883348002869876827450608391612618303147037085628348096658967831350099363391369223458419760004158780148890859277591464612275117972748922254153480090110257437356893193891188080999231924930028820934565040480044132770443462059291230842579013328526712305862134409684722403918133def gcd(a,b):    while a != b:        if a > b:            a = a - b        else:            b = b - a    return adef extGCD(x, y):    result = []    a = x    b = y    u1 = 1    v1 = 0    u2 = 0    v2 = 1    a == u1 * x + v1 * y    b == u2 * x + v2 * y;    while (b != 0):        q = a / b        r = a % b        a = b; b = r        t = u2        u2 = u1 - q * u2        u1 = t        t = v2        v2 = v1 - q * v2        v1 = t    d = a    u = u1    v = v1    result.append(d)    result.append(u)    result.append(v)    return resultdef pow(t, k):    res = 1    while (k):        if (k & 1):            res *= t        t *= t        k >>= 1    return resdef powm(a, k, n):    b=1    while (k):        if (k%2==0):            k /= 2            a = (a*a)%n        else:            k -= 1            b = (b*a)%n    return bdef powMod(base, power, modulus):    result = 0    base = gmpy.mpz(base)    power = gmpy.mpz(power)    modulus = gmpy.mpz(modulus)    result = gmpy.mpz( result)    result = powm(base, power, modulus)    return resultdef secret_D(e,ph):    GCDresult = extGCD(e, ph)    d = GCDresult[1]    if d<0:        d += ph    return ddef rsa_code(m,n,e):    code=powMod(m,e,n)    return codedef rsa_uncode(x,d,n):    decode=powMod(x,d,n)    return decodedef test():    import sys    from random import getrandbits    e = 65537    n = p512*q512    keys=range(64,1024,64)    m = 12345678901234567123412345678901234567890567890123456789089012345678901231234567890123456789045678901234567890**10    times = []    t = 0    for i in range(100):        start = time.clock()        phi = (p512-1)*(q512-1)        d = secret_D(e,phi)        C = rsa_code(m,n,e)        elapsed = time.clock() - start        t1 = round(elapsed,3)    print sys.getsizeof(m)    print m    print    print C    print sys.getsizeof(C)    for i in range(100):        start = elapsed        phi = (p512-1)*(q512-1)        d = secret_D(e,phi)        C = rsa_code(C,n,e)        elapsed = time.clock() - start        t2 = round(elapsed,3)    for i in range(100):        start = elapsed        phi = (p512-1)*(q512-1)        d = secret_D(e,phi)        C = rsa_code(C,n,e)        elapsed = time.clock() - start        t3 = round(elapsed,3)    for i in range(100):        start = elapsed        phi = (p512-1)*(q512-1)        d = secret_D(e,phi)        C = rsa_code(C,n,e)        elapsed = time.clock() - start        t4 = round(elapsed,3)    for i in range(100):        start = elapsed        phi = (p512-1)*(q512-1)        d = secret_D(e,phi)        C = rsa_code(C,n,e)        elapsed = time.clock() - start        t5 = round(elapsed,3)    print t1,t2,t3,t4,t5    times.append(t1)    times.append(t2)    times.append(t3)    times.append(t4)    times.append(t5)    lens=[512,1024,1536,2048,2560]    plt.xlabel('Length, bit')    plt.ylabel('Time, s')    plt.grid()    plt.xticks(lens)    plt.yticks(times)    plt.plot(lens,times,'ro-')    plt.show()test()